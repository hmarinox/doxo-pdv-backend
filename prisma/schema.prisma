// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Products {
  id                        Int      @id @default(autoincrement())
  marca                     String
  descricao                 String
  unidade                   String   @default("UN")
  ncm                       String
  valor_unitario            Float
  ean                       String?
  codigo                    String
  codigo_produto            BigInt   @unique @db.BigInt
  codigo_produto_integracao String
  peso_bruto                Float
  ageToBuy                  Int      @default(0)
  qtd                       Float
  dias_garantia             Int
  tagId                     String?
  tagChecked                Boolean?
  datamatrixId              String?
  aliquota_cofins           Float
  aliquota_ibpt             Float
  aliquota_icms             Float
  aliquota_pis              Float
  cest                      String?
  cfop                      String?
  csosn_icms                String?
  cst_cofins                String?
  cst_icms                  String?
  cst_pis                   String?
  per_icms_fcp              Float
  red_base_cofins           Float
  red_base_icms             Float
  red_base_pis              Float
  tipoItem                  String
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @default(now())
}

model Companies {
  id     Int      @id @default(autoincrement())
  name   String
  cnpj   String   @unique
  ie     String
  isSync Boolean  @default(false)
  Store  Stores[]
}

model Stores {
  id           Int         @id @default(autoincrement())
  name         String
  companyId    Int
  street       String
  number       String
  neighborhood String
  city         String
  state        String
  country      String      @default("Brasil")
  storeUUID    String?     @unique @default(uuid())
  zipCode      String
  complement   String?
  emitModel    Int
  ufCode       String
  cityCode     String
  isSync       Boolean     @default(false)
  Company      Companies   @relation(fields: [companyId], references: [id])
  Pdv          Pdv[]
  Employees    Employees[]
}

model Pdv {
  id              Int     @id @default(autoincrement())
  pdvUUID         String  @unique @default(uuid())
  storeId         Int
  name            String
  isSync          Boolean @default(false)
  macAddress      String  @unique
  taxReceiptSerie Int     @unique
  Store           Stores  @relation(fields: [storeId], references: [id])
  Sales           Sales[]
}

model Sales {
  id            Int            @id @default(autoincrement())
  saleUUID      String         @unique @default(uuid())
  pdvId         Int
  isSync        Boolean        @default(false)
  Pdv           Pdv            @relation(fields: [pdvId], references: [id])
  SalesProducts SalesProducts?
  TaxReceipt    TaxReceipt?
}

model SalesProducts {
  id        Int      @id @default(autoincrement())
  saleId    Int      @unique
  products  Json
  createdAt DateTime
  Sales     Sales    @relation(fields: [saleId], references: [id])
}

model TaxReceipt {
  id                 Int            @id @default(autoincrement())
  saleId             Int            @unique
  taxReceiptEmitDate DateTime
  taxReceiptNumber   Int
  taxReceiptSerie    Int
  taxReceiptKey      String
  createdAt          DateTime       @default(now())
  Sale               Sales          @relation(fields: [saleId], references: [id])
  TaxReceiptXML      TaxReceiptXML?
}

model TaxReceiptXML {
  id            Int        @id @default(autoincrement())
  taxReceiptId  Int        @unique
  MigrateResult String     @db.LongText
  createdAt     DateTime   @default(now())
  TaxReceipt    TaxReceipt @relation(fields: [taxReceiptId], references: [id])
}

model Employees {
  id               Int           @id @default(autoincrement())
  storeId          Int
  name             String
  email            String
  password         String
  registrationCode String
  level            employeeLevel
  Stores           Stores        @relation(fields: [storeId], references: [id])
}

model Users {
  id       Int       @id @default(autoincrement())
  name     String
  email    String
  password String
  level    userLevel
}

enum userLevel {
  ADMIN
  OPERATOR
}

enum employeeLevel {
  MANAGER
  COLLABORATOR
}
